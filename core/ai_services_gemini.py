"""
Service de recommandation IA avec Google Gemini
Pour utilisateurs Premium et Business uniquement
"""

import os
import json
from django.conf import settings

# Configuration Gemini
try:
    import google.generativeai as genai
    GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
    if GOOGLE_API_KEY:
        genai.configure(api_key=GOOGLE_API_KEY)
        print("‚úÖ [GEMINI] API configur√©e avec succ√®s")
    else:
        print("‚ö†Ô∏è [GEMINI] Cl√© API manquante dans .env")
except ImportError:
    print("‚ö†Ô∏è [GEMINI] Module google-generativeai non install√©")
    genai = None


def generate_destination_recommendations(user_profile, wallet_balance=None, max_recommendations=5):
    """
    G√©n√®re des recommandations de destinations personnalis√©es avec Gemini
    
    Args:
        user_profile: Dict contenant le profil MongoDB de l'utilisateur
        wallet_balance: Solde disponible dans le wallet
        max_recommendations: Nombre maximum de recommandations
    
    Returns:
        Dict avec succ√®s et liste de recommandations
    """
    if not genai or not GOOGLE_API_KEY:
        return {
            'success': False,
            'error': 'API Gemini non configur√©e',
            'recommendations': []
        }
    
    try:
        # Construire le prompt avec les donn√©es utilisateur
        interests = user_profile.get('interests', [])
        travel_types = user_profile.get('travel_type', [])
        languages = user_profile.get('languages', [])
        nationality = user_profile.get('nationality', '')
        travel_budget = user_profile.get('travel_budget', 'moyenne')
        
        prompt = f"""
Tu es un expert en voyage et tu dois recommander des destinations parfaites pour cet utilisateur.

PROFIL UTILISATEUR:
- Int√©r√™ts: {', '.join(interests) if interests else 'Divers'}
- Type de voyage pr√©f√©r√©: {', '.join(travel_types) if travel_types else 'Flexible'}
- Langues parl√©es: {', '.join(languages) if languages else 'Non sp√©cifi√©'}
- Nationalit√©: {nationality or 'Non sp√©cifi√©'}
- Budget: {travel_budget}
- Solde disponible dans le wallet: {wallet_balance if wallet_balance else 'Non sp√©cifi√©'} EUR

T√ÇCHE:
Recommande {max_recommendations} destinations de voyage parfaites pour cet utilisateur.

CONTRAINTES:
- Tenir compte du budget disponible
- Proposer des destinations vari√©es
- Consid√©rer les int√©r√™ts et le style de voyage
- Proposer des destinations accessibles linguistiquement si possible

FORMAT DE R√âPONSE (JSON strict):
{{
  "recommendations": [
    {{
      "destination": "Nom de la ville",
      "country": "Nom du pays",
      "estimated_budget": 1500,
      "currency": "EUR",
      "duration_days": 7,
      "best_season": "Printemps/√ât√©/Automne/Hiver",
      "description": "Description courte (2-3 lignes)",
      "why_recommended": "Pourquoi cette destination correspond au profil",
      "activities": ["Activit√© 1", "Activit√© 2", "Activit√© 3"],
      "priority": 1-4,
      "tags": ["tag1", "tag2", "tag3"]
    }}
  ]
}}

R√©ponds UNIQUEMENT avec le JSON, sans texte suppl√©mentaire.
"""
        
        print(f"ü§ñ [GEMINI] G√©n√©ration de recommandations...")
        
        # Appeler l'API Gemini
        model = genai.GenerativeModel('gemini-1.5-flash')
        response = model.generate_content(prompt)
        
        # Parser la r√©ponse JSON
        response_text = response.text.strip()
        
        # Nettoyer la r√©ponse si elle contient des balises markdown
        if response_text.startswith('```json'):
            response_text = response_text.replace('```json', '').replace('```', '').strip()
        elif response_text.startswith('```'):
            response_text = response_text.replace('```', '').strip()
        
        recommendations_data = json.loads(response_text)
        
        print(f"‚úÖ [GEMINI] {len(recommendations_data.get('recommendations', []))} recommandations g√©n√©r√©es")
        
        return {
            'success': True,
            'recommendations': recommendations_data.get('recommendations', []),
            'total': len(recommendations_data.get('recommendations', []))
        }
    
    except json.JSONDecodeError as e:
        print(f"‚ùå [GEMINI] Erreur de parsing JSON : {e}")
        print(f"   R√©ponse brute : {response.text[:500]}")
        return {
            'success': False,
            'error': f'Erreur de parsing JSON: {str(e)}',
            'recommendations': [],
            'raw_response': response.text[:500]
        }
    
    except Exception as e:
        print(f"‚ùå [GEMINI] Erreur : {e}")
        return {
            'success': False,
            'error': str(e),
            'recommendations': []
        }


def generate_bucket_list_description(destination, country):
    """
    G√©n√®re une description attrayante pour un √©l√©ment de bucket list
    
    Args:
        destination: Nom de la destination
        country: Nom du pays
    
    Returns:
        String avec la description g√©n√©r√©e
    """
    if not genai or not GOOGLE_API_KEY:
        return "Description non disponible (API Gemini non configur√©e)"
    
    try:
        prompt = f"""
G√©n√®re une description courte et inspirante (3-4 lignes) pour une destination de r√™ve.

Destination: {destination}
Pays: {country}

La description doit:
- √ätre engageante et donner envie de visiter
- Mentionner 2-3 points d'int√©r√™t principaux
- √ätre concise et po√©tique
- √ätre en fran√ßais

R√©ponds UNIQUEMENT avec la description, sans titre ni introduction.
"""
        
        model = genai.GenerativeModel('gemini-1.5-flash')
        response = model.generate_content(prompt)
        
        return response.text.strip()
    
    except Exception as e:
        print(f"‚ùå [GEMINI] Erreur description : {e}")
        return f"D√©couvrez {destination}, {country} - une destination qui vous fera r√™ver !"


def generate_trip_itinerary(destination, duration_days, interests):
    """
    G√©n√®re un itin√©raire de voyage personnalis√©
    
    Args:
        destination: Nom de la destination
        duration_days: Dur√©e du s√©jour en jours
        interests: Liste des int√©r√™ts de l'utilisateur
    
    Returns:
        String avec l'itin√©raire g√©n√©r√©
    """
    if not genai or not GOOGLE_API_KEY:
        return "Itin√©raire non disponible (API Gemini non configur√©e)"
    
    try:
        prompt = f"""
Cr√©e un itin√©raire de voyage d√©taill√© pour:

Destination: {destination}
Dur√©e: {duration_days} jours
Int√©r√™ts: {', '.join(interests) if interests else 'D√©couverte g√©n√©rale'}

Format:
Jour 1: [Activit√©s]
Jour 2: [Activit√©s]
...

L'itin√©raire doit:
- √ätre r√©aliste et faisable
- Tenir compte des int√©r√™ts de l'utilisateur
- Inclure des temps de repos
- M√©langer attractions touristiques et exp√©riences locales
- √ätre en fran√ßais

R√©ponds de mani√®re structur√©e et concise.
"""
        
        model = genai.GenerativeModel('gemini-1.5-flash')
        response = model.generate_content(prompt)
        
        return response.text.strip()
    
    except Exception as e:
        print(f"‚ùå [GEMINI] Erreur itin√©raire : {e}")
        return "Itin√©raire non disponible pour le moment."


def generate_travel_tips(destination, user_nationality):
    """
    G√©n√®re des conseils de voyage personnalis√©s
    
    Args:
        destination: Nom de la destination
        user_nationality: Nationalit√© de l'utilisateur
    
    Returns:
        String avec les conseils g√©n√©r√©s
    """
    if not genai or not GOOGLE_API_KEY:
        return "Conseils non disponibles (API Gemini non configur√©e)"
    
    try:
        prompt = f"""
G√©n√®re 5-7 conseils pratiques essentiels pour un voyageur de nationalit√© {user_nationality} 
qui visite {destination}.

Les conseils doivent couvrir:
- Formalit√©s (visa, etc.)
- S√©curit√©
- Transport local
- Budget approximatif
- Meilleure p√©riode de visite
- Coutumes locales importantes

Format:
‚Ä¢ Conseil 1
‚Ä¢ Conseil 2
...

Sois concis et pratique. En fran√ßais.
"""
        
        model = genai.GenerativeModel('gemini-1.5-flash')
        response = model.generate_content(prompt)
        
        return response.text.strip()
    
    except Exception as e:
        print(f"‚ùå [GEMINI] Erreur conseils : {e}")
        return "Conseils non disponibles pour le moment."


def analyze_spending_pattern(transactions):
    """
    Analyse les habitudes de d√©penses et donne des recommandations
    
    Args:
        transactions: Liste des transactions du wallet
    
    Returns:
        Dict avec analyse et recommandations
    """
    if not genai or not GOOGLE_API_KEY or not transactions:
        return {
            'success': False,
            'analysis': 'Analyse non disponible',
            'recommendations': []
        }
    
    try:
        # Pr√©parer les donn√©es de transaction
        transaction_summary = []
        for t in transactions[:20]:  # Limiter aux 20 derni√®res
            transaction_summary.append({
                'type': t.transaction_type,
                'amount': float(t.amount),
                'description': t.description,
                'date': t.created_at.strftime('%Y-%m-%d')
            })
        
        prompt = f"""
Analyse ces transactions de voyage et donne des recommandations financi√®res:

TRANSACTIONS:
{json.dumps(transaction_summary, indent=2)}

T√ÇCHE:
1. Identifier les patterns de d√©penses
2. Calculer le budget moyen par type de d√©pense
3. Donner 3-4 recommandations pour optimiser les d√©penses

FORMAT (JSON):
{{
  "analysis": "Analyse courte des habitudes",
  "average_spending": 1234,
  "recommendations": [
    "Recommandation 1",
    "Recommandation 2"
  ]
}}

R√©ponds UNIQUEMENT avec le JSON.
"""
        
        model = genai.GenerativeModel('gemini-1.5-flash')
        response = model.generate_content(prompt)
        
        # Parser la r√©ponse
        response_text = response.text.strip()
        if response_text.startswith('```json'):
            response_text = response_text.replace('```json', '').replace('```', '').strip()
        
        analysis_data = json.loads(response_text)
        
        return {
            'success': True,
            **analysis_data
        }
    
    except Exception as e:
        print(f"‚ùå [GEMINI] Erreur analyse : {e}")
        return {
            'success': False,
            'analysis': 'Analyse non disponible',
            'recommendations': []
        }